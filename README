--------
PROBLEM 
--------

This section gives details about the problem at hand:

The problem for this project is to create a dictionary from input raw text. The input for the system will be some instances (sentences), containing the target word, whose meaning has to be determined. The system created as a solution must cluster the input instances into N clusters, where N is automatically selected by the system. Also the system should give a meaning to each of these automatically created clusters and pick an example from the input instances for each of these clusters. The system should only use the input instances containing the target word, along with some random text from any corpus if needed.

---------------------------
SOLUTION - BASELINE SYSTEM
---------------------------

This section gives details about the solution used in the system:

The main idea behind the baseline system, is that words with same sense in different instances (sentences), have similar context i.e similar words around the target word. The picks up the first sentence yet to be clustered and identify words around the target word (also called feature words throughout the code and documentation) and then it looks, for these feature words in all the sentences and if it matches words in the sentence yet to be clustered it assigns them to the same cluster. It keeps on doing that till all the senteces become a part of some cluster. Finally there will be a few remaining sentences that don't have any common feature words, we assign all of them to a final cluster. 

-----------------------
HOW TO RUN THE PROGRAM
-----------------------

This section gives details about how to run the program:




------------------
INPUT FILE FORMAT 
------------------

The Primary input for the program is Senseval-2 file format file. Three different xml files created by each individual of the team are :
1. A two words, name-conflate pair xml file.
2. A word with POS as Noun xml file.
3. A word with POS as Verb xml file.

Example format for name-conflate pair xml file :

 <?xml version="1.0" encoding="iso-8859-1" ?>
 <corpus lang='english'>

 <lexelt item="p_h">

 <instance id="1">
 <answer instance="1" senseid="priest"/>
 <context>
  at the valley of Shaveh, which is the king's dale. 14:18 And Melchizedek king of Salem brought forth bread and wine: and he was the  <head>p_h</head> of the most high God.  14:19 And he blessed him, and said, Blessed be Abram of the most high God, possessor of     heaven and earth: 
 </context>
 </instance>
 </lexelt>
 </corpus>

Example format for word with POS file :

 <?xml version="1.0" encoding="iso-8859-1" ?>
 <corpus lang='english'>

 <lexelt item="G">

 <instance id="1">
 <answer instance="1" senseid="Supreme_Power"/>
 <context>
In the beginning <head>God</head> created the heaven and the earth. And the earth was without form, and void; and darkness was upon the face of the deep. And the 
 </context>
 </instance>
 </lexelt>
 </corpus>

-------------------
OUTPUT FILE FORMAT
-------------------

Four different types of Output files will be generated by this system
1.Output xml file: Our algorithm clusters the instances and gives these instances in output xml file, which will be in Senseval-2 format. The name of the this file depends on the  file name specified in the runit.sh script.
2.Output text file: It contains a definition and an example for each sense of the target word. The name of this file will be in the format as word-definition.text
3.Output Key file: It is generated from the output xml file. It acts as input to the Sensecluster Scrorer program.
4.Input Key file: It is generated from the input xml file. It acts as input to the Sensecluster Scorer Program.

--------------
CONTRIBUTIONS
--------------

Vamsidhar Kasireddy:

Primary author of sensedef.py and main.py. Also contributed in the coming up with a solution of the baseline system. Author of the HOW TO RUN section of this README.

Preethi Chimerla:

Primary author of keywrite.py, xmlwrite.py and install.sh. Also contributed in the coming up with a solution of the baseline system. Author of the INPUT FILE and OUTPUT FILE FORMAT sections of this README.

Nirav Sharda:

Primary author of XMLParser.py and runit.sh. Also contributed in the coming up with a solution of the baseline system. Author of the PROBLEM and SOLUTION sections of this README.
